// <auto-generated />
using System;
using AgenciaDeViajes.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AgenciaDeViajes.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250607001925_NuevaMigracionReservasFix")]
    partial class NuevaMigracionReservasFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AgenciaDeViajes.Models.Actividad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int>("EventoId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("HoraFin")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("HoraInicio")
                        .HasColumnType("interval");

                    b.Property<int>("IdEvento")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.ToTable("Actividades");
                });

            modelBuilder.Entity("AgenciaDeViajes.Models.Destino", b =>
                {
                    b.Property<int>("id_destino")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_destino"));

                    b.Property<string>("ImgDest_url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("desc_destino")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("id_region")
                        .HasColumnType("integer");

                    b.Property<string>("nom_destino")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("num_entradas")
                        .HasColumnType("integer");

                    b.Property<decimal>("precio_tour")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("time_tour")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("id_destino");

                    b.HasIndex("id_region");

                    b.ToTable("Destinos");
                });

            modelBuilder.Entity("AgenciaDeViajes.Models.EntradaBlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EntradasBlog");
                });

            modelBuilder.Entity("AgenciaDeViajes.Models.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int>("FestividadId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("Hora")
                        .HasColumnType("interval");

                    b.Property<int>("IdFestividad")
                        .HasColumnType("integer");

                    b.Property<string>("Lugar")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FestividadId");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("AgenciaDeViajes.Models.Festividad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagenUrl")
                        .HasColumnType("text");

                    b.Property<string>("Lugar")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Festividades");
                });

            modelBuilder.Entity("AgenciaDeViajes.Models.Region", b =>
                {
                    b.Property<int>("id_region")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_region"));

                    b.Property<string>("ImgReg_url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("desc_region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("num_tours")
                        .HasColumnType("integer");

                    b.HasKey("id_region");

                    b.ToTable("Regiones");
                });

            modelBuilder.Entity("AgenciaDeViajes.Models.ReservaTour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadBoletos")
                        .HasColumnType("integer");

                    b.Property<int>("DestinoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaReserva")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PrecioTotal")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DestinoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ReservasTours");
                });

            modelBuilder.Entity("AgenciaDeViajes.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DNI")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MetodoRegistro")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("AgenciaDeViajes.Models.Actividad", b =>
                {
                    b.HasOne("AgenciaDeViajes.Models.Evento", "Evento")
                        .WithMany("Actividades")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("AgenciaDeViajes.Models.Destino", b =>
                {
                    b.HasOne("AgenciaDeViajes.Models.Region", "Region")
                        .WithMany("Destinos")
                        .HasForeignKey("id_region")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AgenciaDeViajes.Models.Evento", b =>
                {
                    b.HasOne("AgenciaDeViajes.Models.Festividad", "Festividad")
                        .WithMany("Eventos")
                        .HasForeignKey("FestividadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Festividad");
                });

            modelBuilder.Entity("AgenciaDeViajes.Models.ReservaTour", b =>
                {
                    b.HasOne("AgenciaDeViajes.Models.Destino", "Destino")
                        .WithMany()
                        .HasForeignKey("DestinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgenciaDeViajes.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destino");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AgenciaDeViajes.Models.Evento", b =>
                {
                    b.Navigation("Actividades");
                });

            modelBuilder.Entity("AgenciaDeViajes.Models.Festividad", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("AgenciaDeViajes.Models.Region", b =>
                {
                    b.Navigation("Destinos");
                });
#pragma warning restore 612, 618
        }
    }
}
